// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_INCLUDED_service_2eproto
#define PROTOBUF_INCLUDED_service_2eproto

#include <limits>
#include <string>

#include <google/protobuf/stubs/common.h>
#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_service_2eproto();
namespace sdc {
class Service;
class ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
class Service_Property;
class Service_PropertyDefaultTypeInternal;
extern Service_PropertyDefaultTypeInternal _Service_Property_default_instance_;
}  // namespace sdc
namespace google {
namespace protobuf {
template<> ::sdc::Service* Arena::CreateMaybeMessage<::sdc::Service>(Arena*);
template<> ::sdc::Service_Property* Arena::CreateMaybeMessage<::sdc::Service_Property>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sdc {

// ===================================================================

class Service_Property : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sdc.Service.Property) */ {
 public:
  Service_Property();
  virtual ~Service_Property();

  Service_Property(const Service_Property& from);

  inline Service_Property& operator=(const Service_Property& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Service_Property(Service_Property&& from) noexcept
    : Service_Property() {
    *this = ::std::move(from);
  }

  inline Service_Property& operator=(Service_Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Service_Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service_Property* internal_default_instance() {
    return reinterpret_cast<const Service_Property*>(
               &_Service_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Service_Property* other);
  friend void swap(Service_Property& a, Service_Property& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Service_Property* New() const final {
    return CreateMaybeMessage<Service_Property>(NULL);
  }

  Service_Property* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Service_Property>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Service_Property& from);
  void MergeFrom(const Service_Property& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service_Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:sdc.Service.Property)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class Service : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sdc.Service) */ {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Service& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Service* other);
  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Service* New() const final {
    return CreateMaybeMessage<Service>(NULL);
  }

  Service* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Service>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Service_Property Property;

  // accessors -------------------------------------------------------

  // repeated .sdc.Service.Property Properties = 3;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  ::sdc::Service_Property* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::sdc::Service_Property >*
      mutable_properties();
  const ::sdc::Service_Property& properties(int index) const;
  ::sdc::Service_Property* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::sdc::Service_Property >&
      properties() const;

  // string ServiceName = 1;
  void clear_servicename();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& servicename() const;
  void set_servicename(const ::std::string& value);
  #if LANG_CXX11
  void set_servicename(::std::string&& value);
  #endif
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  ::std::string* mutable_servicename();
  ::std::string* release_servicename();
  void set_allocated_servicename(::std::string* servicename);

  // string Address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:sdc.Service)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sdc::Service_Property > properties_;
  ::google::protobuf::internal::ArenaStringPtr servicename_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Service_Property

// string Key = 1;
inline void Service_Property::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Service_Property::key() const {
  // @@protoc_insertion_point(field_get:sdc.Service.Property.Key)
  return key_.GetNoArena();
}
inline void Service_Property::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sdc.Service.Property.Key)
}
#if LANG_CXX11
inline void Service_Property::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdc.Service.Property.Key)
}
#endif
inline void Service_Property::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdc.Service.Property.Key)
}
inline void Service_Property::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdc.Service.Property.Key)
}
inline ::std::string* Service_Property::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:sdc.Service.Property.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service_Property::release_key() {
  // @@protoc_insertion_point(field_release:sdc.Service.Property.Key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service_Property::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:sdc.Service.Property.Key)
}

// string Value = 2;
inline void Service_Property::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Service_Property::value() const {
  // @@protoc_insertion_point(field_get:sdc.Service.Property.Value)
  return value_.GetNoArena();
}
inline void Service_Property::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sdc.Service.Property.Value)
}
#if LANG_CXX11
inline void Service_Property::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdc.Service.Property.Value)
}
#endif
inline void Service_Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdc.Service.Property.Value)
}
inline void Service_Property::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdc.Service.Property.Value)
}
inline ::std::string* Service_Property::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:sdc.Service.Property.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service_Property::release_value() {
  // @@protoc_insertion_point(field_release:sdc.Service.Property.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service_Property::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:sdc.Service.Property.Value)
}

// -------------------------------------------------------------------

// Service

// string ServiceName = 1;
inline void Service::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Service::servicename() const {
  // @@protoc_insertion_point(field_get:sdc.Service.ServiceName)
  return servicename_.GetNoArena();
}
inline void Service::set_servicename(const ::std::string& value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sdc.Service.ServiceName)
}
#if LANG_CXX11
inline void Service::set_servicename(::std::string&& value) {
  
  servicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdc.Service.ServiceName)
}
#endif
inline void Service::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdc.Service.ServiceName)
}
inline void Service::set_servicename(const char* value, size_t size) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdc.Service.ServiceName)
}
inline ::std::string* Service::mutable_servicename() {
  
  // @@protoc_insertion_point(field_mutable:sdc.Service.ServiceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service::release_servicename() {
  // @@protoc_insertion_point(field_release:sdc.Service.ServiceName)
  
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:sdc.Service.ServiceName)
}

// string Address = 2;
inline void Service::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Service::address() const {
  // @@protoc_insertion_point(field_get:sdc.Service.Address)
  return address_.GetNoArena();
}
inline void Service::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sdc.Service.Address)
}
#if LANG_CXX11
inline void Service::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdc.Service.Address)
}
#endif
inline void Service::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdc.Service.Address)
}
inline void Service::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdc.Service.Address)
}
inline ::std::string* Service::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:sdc.Service.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service::release_address() {
  // @@protoc_insertion_point(field_release:sdc.Service.Address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:sdc.Service.Address)
}

// repeated .sdc.Service.Property Properties = 3;
inline int Service::properties_size() const {
  return properties_.size();
}
inline void Service::clear_properties() {
  properties_.Clear();
}
inline ::sdc::Service_Property* Service::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:sdc.Service.Properties)
  return properties_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sdc::Service_Property >*
Service::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:sdc.Service.Properties)
  return &properties_;
}
inline const ::sdc::Service_Property& Service::properties(int index) const {
  // @@protoc_insertion_point(field_get:sdc.Service.Properties)
  return properties_.Get(index);
}
inline ::sdc::Service_Property* Service::add_properties() {
  // @@protoc_insertion_point(field_add:sdc.Service.Properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sdc::Service_Property >&
Service::properties() const {
  // @@protoc_insertion_point(field_list:sdc.Service.Properties)
  return properties_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sdc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_service_2eproto
